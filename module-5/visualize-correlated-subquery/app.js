const productsTable = document.getElementById('productsTable');
const resultTable = document.getElementById('resultTable');

// H√†m t·∫°o b·∫£ng HTML t·ª´ d·ªØ li·ªáu
function createTable(data, table) {
  const tbody = table.querySelector('tbody');
  console.log('tbody', tbody);
  data.forEach((item, index) => {
    const row = document.createElement('tr');
    row.innerHTML = `
          <td id="${table.id}-${index + 1}-c1">${item.id}</td>
          <td id="${table.id}-${index + 1}-c2">${item.title}</td>
          <td id="${table.id}-${index + 1}-c3">${item.price}</td>
          <td id="${table.id}-${index + 1}-c4">${item.category}</td>
          <td id="${table.id}-${index + 1}-c5">AVG(price) ... WHERE category = p.category</td>
          <td class="pointer" id="${table.id}-${index + 1}6">üëà</td>
        `;
    tbody.appendChild(row);
  });
}

// H√†m t√≠nh gi√° trung b√¨nh theo category
function calculateAveragePrice(category) {
  const productsInCategory = products.filter(p => p.category === category);
  const sum = productsInCategory.reduce((total, p) => total + parseFloat(p.price), 0);
  return sum / productsInCategory.length;
}

// H√†m th·ª±c hi·ªán truy v·∫•n v√† tr·ª±c quan h√≥a
// H√†m th·ª±c hi·ªán truy v·∫•n v√† tr·ª±c quan h√≥a
async function executeQuery() {
  const result = [];

  for (let i = 0; i < products.length; i++) {
    const product = products[i];
    const row = productsTable.rows[i + 1]; // B·ªè qua header
    row.classList.add('highlight');

    await new Promise(resolve => setTimeout(resolve, 1000)); // T·∫°o ƒë·ªô tr·ªÖ

    // B1: Hi·ªÉn th·ªã c√¢u truy v·∫•n con
    row.cells[4].textContent = `AVG(price) ... WHERE category = '${product.category}'`;

    // B2 & B3: Highlight category ƒë∆∞·ª£c so s√°nh
    const categoryCells = Array
      .from(productsTable.querySelectorAll('td'))
      .filter(cell => cell.id.endsWith('c4') && cell.textContent === product.category);
    categoryCells.forEach(cell => {
      cell.classList.add('joinCondition');
      preCell = productsTable.querySelector('#' + cell.id.replace('c4', 'c3'));
      preCell.classList.add('joinCondition');
    });

    await new Promise(resolve => setTimeout(resolve, 1000)); // T·∫°o ƒë·ªô tr·ªÖ

    // B4: T√≠nh to√°n v√† hi·ªÉn th·ªã gi√° trung b√¨nh
    const avgPrice = calculateAveragePrice(product.category);
    row.cells[4].textContent = row.cells[4].textContent = avgPrice.toFixed(2);

    // Highlight ƒëi·ªÅu ki·ªán WHERE
    row.cells[2].classList.add('compareCell');
    row.cells[4].classList.add('compareCell');
    await new Promise(resolve => setTimeout(resolve, 1000)); // T·∫°o ƒë·ªô tr·ªÖ


    if (parseFloat(product.price) > avgPrice) {
      result.push(product);
      row.classList.add('matchedRow');

      // Highlight d√≤ng k·∫øt qu·∫£
      const resultRow = document.createElement('tr');
      resultRow.classList.add('matchedRow');
      resultRow.innerHTML = `
            <td>${product.id}</td>
            <td>${product.title}</td>
            <td>${product.price}</td>
            <td>${product.category}</td>
            <td></td>
          `;
      resultTable.querySelector('tbody').appendChild(resultRow);
    }

    await new Promise(resolve => setTimeout(resolve, 1000)); // T·∫°o ƒë·ªô tr·ªÖ

    // X√≥a highlight sau khi x·ª≠ l√Ω xong
    row.cells[2].classList.remove('compareCell');
    row.cells[4].classList.remove('compareCell');

    row.classList.remove('highlight');
    const joinConditionCells = Array
      .from(productsTable.querySelectorAll('td.joinCondition'));
    joinConditionCells.forEach(cell => cell.classList.remove('joinCondition'));
  }

  return result;
}
// T·∫°o b·∫£ng products
createTable(products, productsTable);

// Th·ª±c hi·ªán truy v·∫•n khi trang web ƒë√£ t·∫£i xong
window.onload = () => {
  executeQuery()
    .then(result => console.log("K·∫øt qu·∫£:", result))
    .catch(error => console.error("L·ªói:", error));
};